================================================================================
GROWTHPOINT LIFT EMERGENCY SYSTEM - COMPLETE REFERENCE GUIDE
================================================================================
Last Updated: October 2, 2025
Version: 1.2
Status: PRODUCTION READY - Full End-to-End Working
================================================================================

TABLE OF CONTENTS:
1. System Overview
2. Meta Business Manager Configuration
3. Meta Graph API Setup
4. Environment Variables & Secrets
5. Message Flow Architecture
6. API Endpoints Reference
7. Database Schema
8. Troubleshooting Guide
9. Daily Operations Checklist
10. Emergency Contacts & Access

================================================================================
1. SYSTEM OVERVIEW
================================================================================

PURPOSE:
Emergency lift monitoring and response system for GrowthPoint properties.
Receives SMS alerts, sends WhatsApp templates with interactive buttons,
processes responses, and manages escalation workflows.

KEY COMPONENTS:
- SMS Reception (Vodacom bulk SMS)
- WhatsApp Template Messaging (Meta Graph API)
- Interactive Button Handling (Meta Webhooks)
- Auto-close System (3 reminders over 3 minutes)
- Live Chat System (Agent ↔ WhatsApp)
- Intelligence Dashboards
- AI Troubleshooting API

INDEPENDENCE ACHIEVED:
✅ Direct Meta Graph API integration (no Woosh Bridge dependency)
✅ Direct Meta webhooks (no forwarding issues)
✅ Full control over message flow
✅ Zero external dependencies for critical path

================================================================================
2. META BUSINESS MANAGER CONFIGURATION
================================================================================

META APP DETAILS:
App Name: Woosh Agent
App ID: 815985074117188
App Mode: Live (Production)
App Type: Business

WHATSAPP BUSINESS ACCOUNT:
Account ID: 620143974365970
Phone Number: 27690232755
Phone Number ID: 861610750363214
Display Name: Growthpoint lifts
Status: Active

WEBHOOK CONFIGURATION:
Location: Meta Business Manager → WhatsApp → Configuration

Callback URL:
https://gplifts.woosh.ai/webhooks/whatsapp

Verify Token:
4d8d0f67a548eda1bf967da6d26fd0cecde4ec2a4061dba303a268a1096015e7

Webhook Fields (MUST BE SUBSCRIBED):
✅ messages (CRITICAL - for button clicks and text messages)
✅ message_template_components_update
✅ message_template_quality_update  
✅ message_template_status_update

PHONE NUMBER SUBSCRIPTION:
CRITICAL: Phone must be subscribed to app to receive webhooks

Command to verify subscription:
curl -X GET "https://graph.facebook.com/v23.0/620143974365970/subscribed_apps" \
  -H "Authorization: Bearer YOUR_TOKEN"

Command to subscribe:
curl -X POST "https://graph.facebook.com/v23.0/620143974365970/subscribed_apps" \
  -H "Authorization: Bearer YOUR_TOKEN"

Response should be: {"success": true}

================================================================================
3. META GRAPH API SETUP
================================================================================

GRAPH API VERSION: v23.0

ACCESS TOKEN (System User Token):
Token: [REDACTED - Stored in Replit Secrets as META_ACCESS_TOKEN]
Type: System User Token (long-lived)
Permissions Required:
  - whatsapp_business_messaging
  - whatsapp_business_management
Generated: October 2, 2025
Expiry: Check Meta Business Manager

HOW TO GENERATE NEW TOKEN:
1. Go to Meta Business Manager
2. Settings → Business settings
3. System Users (left menu)
4. Select or create system user
5. Click "Generate New Token"
6. Select app: "Woosh Agent"
7. Check permissions: whatsapp_business_messaging, whatsapp_business_management
8. Generate and copy immediately
9. Update in Replit Secrets as META_ACCESS_TOKEN

SENDING TEMPLATE MESSAGE:
Endpoint: POST https://graph.facebook.com/v23.0/861610750363214/messages

Headers:
  Authorization: Bearer {META_ACCESS_TOKEN}
  Content-Type: application/json

Body (Basic Template - No Parameters):
{
  "messaging_product": "whatsapp",
  "to": "27824537125",
  "type": "template",
  "template": {
    "name": "growthpoint_lift_emergency",
    "language": {"code": "en"}
  }
}

Body (Template With Parameters - growthpoint_lift_emergency_v2):
{
  "messaging_product": "whatsapp",
  "to": "27824537125",
  "type": "template",
  "template": {
    "name": "growthpoint_lift_emergency_v2",
    "language": {"code": "en"},
    "components": [{
      "type": "body",
      "parameters": [
        {"type": "text", "text": "[TKT41] Test Site - Test Building"}
      ]
    }]
  }
}

Response Format:
{
  "messaging_product": "whatsapp",
  "contacts": [{"input": "27824537125", "wa_id": "27824537125"}],
  "messages": [{"id": "wamid.HBgL..."}]
}

Extract message ID from: response.messages[0].id

SENDING INTERACTIVE MESSAGE (YES/NO Buttons):
Endpoint: POST https://graph.facebook.com/v23.0/861610750363214/messages

Headers: Same as above

Body:
{
  "messaging_product": "whatsapp",
  "to": "27824537125",
  "type": "interactive",
  "interactive": {
    "type": "button",
    "body": {
      "text": "Has the service provider been notified?"
    },
    "action": {
      "buttons": [
        {
          "type": "reply",
          "reply": {
            "id": "entrapment_yes",
            "title": "YES"
          }
        }
      ]
    }
  }
}

Button Limits:
- Maximum 3 buttons per message
- Title max 20 characters
- ID max 256 characters
- Body text max 1024 characters

SENDING TEXT MESSAGE (Within 24-hour session):
Endpoint: POST https://graph.facebook.com/v23.0/861610750363214/messages

Body:
{
  "messaging_product": "whatsapp",
  "to": "27824537125",
  "type": "text",
  "text": {
    "body": "Your message text here"
  }
}

================================================================================
4. ENVIRONMENT VARIABLES & SECRETS (REPLIT)
================================================================================

CRITICAL SECRETS (Must be set in Replit Secrets panel):

META_ACCESS_TOKEN
  Value: [STORED IN REPLIT SECRETS - DO NOT COMMIT]
  Purpose: Authenticate with Meta Graph API for sending messages
  Used By: src/server.js, src/lib/bridge.js

META_PHONE_NUMBER_ID
  Value: 861610750363214
  Purpose: WhatsApp phone number ID for sending messages
  Default: Hardcoded in code, can override via env var
  
DATABASE_URL
  Value: [STORED IN REPLIT SECRETS - DO NOT COMMIT]
  Purpose: PostgreSQL database connection
  Provider: Neon.tech

ADMIN_TOKEN
  Value: [STORED IN REPLIT SECRETS - DO NOT COMMIT]
  Purpose: Admin API authentication
  Used For: Admin dashboard, full system access

AI_ASSISTANT_TOKEN
  Value: [STORED IN REPLIT SECRETS - DO NOT COMMIT]
  Purpose: AI troubleshooting API (Augur access)
  Used For: Read-only diagnostics, log viewing

WEBHOOK_VERIFY_TOKEN
  Value: [STORED IN REPLIT SECRETS - DO NOT COMMIT]
  Purpose: Meta webhook verification (GET requests)
  Used For: Initial webhook setup handshake

WEBHOOK_AUTH_TOKEN
  Status: NOT USED (removed for direct Meta integration)
  Note: Meta doesn't send Authorization headers
  Detection: Uses user-agent "facebookexternalua" instead

BRIDGE_TEMPLATE_NAME
  Value: growthpoint_lift_emergency_v2
  Purpose: Default template name
  Note: Templates now sent via Meta Graph API directly

BRIDGE_TEMPLATE_LANG
  Value: en
  Purpose: Default template language

BRIDGE_API_KEY
  Value: [STORED IN REPLIT SECRETS - DO NOT COMMIT]
  Status: LEGACY - Not used for primary flow
  Note: Kept for compatibility, not used in production flow

BRIDGE_BASE_URL
  Value: https://wa.woosh.ai
  Status: LEGACY - Not used for primary flow

SESSION_SECRET
  Value: [STORED IN REPLIT SECRETS - DO NOT COMMIT]
  Purpose: Session management

DATABASE CREDENTIALS (Individual - for direct connection):
PGDATABASE: neondb
PGHOST: ep-noisy-star-a5qe9xkm.us-east-2.aws.neon.tech
PGPORT: 5432
PGUSER: neondb_owner
PGPASSWORD: [STORED IN REPLIT SECRETS]

================================================================================
5. MESSAGE FLOW ARCHITECTURE
================================================================================

COMPLETE END-TO-END FLOW (WORKING AS OF OCT 2, 2025):

STEP 1: SMS ALERT RECEIVED
  Source: Vodacom Bulk SMS
  Endpoint: POST /sms/direct
  Trigger: Emergency button pressed on lift
  
  Actions:
  1. Parse SMS body for lift identification
  2. Look up lift in database by MSISDN
  3. Create ticket record
  4. Get all contacts for that lift
  5. Send WhatsApp templates to all contacts
  6. Store message IDs for tracking

STEP 2: WHATSAPP TEMPLATE SENT
  Method: Direct Meta Graph API
  Endpoint: https://graph.facebook.com/v23.0/861610750363214/messages
  Template: growthpoint_lift_emergency_v2
  
  Message Contains:
  - Emergency header
  - Ticket reference: [TEST-BUILDING-TKT41]
  - Location: Test Site - Test Building
  - Three buttons: Test | Maintenance | Entrapment
  
  API Call:
  POST to Meta with Bearer token
  Response: wa_id (message identifier)
  Stored in: tickets.message_id AND ticket_messages table

STEP 3: USER CLICKS BUTTON
  User Action: Tap Entrapment button in WhatsApp
  
  Meta Action:
  1. User tap registers with Meta
  2. Meta sends webhook to https://gplifts.woosh.ai/webhooks/whatsapp
  3. Webhook includes:
     - message.type: "button"
     - message.button.payload: "Entrapment"
     - message.button.text: "Entrapment"
     - message.context.id: {original wa_id}
     - message.from: "27824537125"

STEP 4: WEBHOOK RECEIVED BY GROWTHPOINT
  Endpoint: POST /webhooks/whatsapp
  Authentication: None (Meta detected by user-agent: facebookexternalua)
  
  Processing:
  1. Detect webhook is from Meta (user-agent check)
  2. Skip auth validation for Meta webhooks
  3. Extract button payload
  4. Extract context.id (original message ID)
  5. Look up ticket by message_id
  6. Find contact by phone number

STEP 5A: TEST BUTTON CLICKED
  Response Message: "Thank you for confirming this is a test. The ticket has been closed."
  Action: Close ticket immediately
  Method: Direct text message via Meta Graph API

STEP 5B: MAINTENANCE BUTTON CLICKED
  Response Message: "Thank you for confirming maintenance. The ticket has been closed."
  Action: Close ticket immediately
  Method: Direct text message via Meta Graph API

STEP 5C: ENTRAPMENT BUTTON CLICKED
  Response Message: Interactive YES button
  Text: "[TKT41] Has the service provider been notified of the entrapment at Test Site - Test Building?"
  Button: YES (id: entrapment_yes)
  
  Method: Interactive message via Meta Graph API
  
  Actions:
  1. Update ticket: button_clicked = "entrapment_awaiting_confirmation"
  2. Send interactive message with YES button
  3. Log entrapment_followup_sent event
  4. Start entrapment reminder timer (60 seconds)

STEP 6: YES BUTTON CLICKED
  User Action: Click YES button to confirm service provider notified
  
  Processing:
  1. Webhook received with button.payload = "entrapment_yes"
  2. Look up ticket by context.id
  3. Send final confirmation message
  4. Update ticket: button_clicked = "entrapment_yes"
  5. Close ticket (status = 'closed', resolved_at = NOW())
  6. Log ticket_closed event

REMINDER SYSTEM:
If no response to initial alert:
  - 60 seconds: Reminder 1 sent
  - 120 seconds: Reminder 2 sent
  - 180 seconds: Reminder 3 sent
  - 181 seconds: Ticket auto-closed

If entrapment confirmed but no YES button:
  - 60 seconds: Entrapment reminder 1
  - 120 seconds: Entrapment reminder 2
  - 180 seconds: Entrapment reminder 3
  - 181 seconds: Ticket auto-closed with escalation note

AUTO-CLOSE MESSAGING:
When 3 reminders sent with no response, system sends:
"This emergency ticket has been automatically closed due to no response. 
If this is still an issue, please press the emergency button again."

================================================================================
6. API ENDPOINTS REFERENCE
================================================================================

PUBLIC ENDPOINTS:

POST /sms/direct
  Purpose: Receive SMS from Vodacom
  Auth: HMAC-SHA256 signature validation
  Body: { msisdn, incoming, id, ts }
  Response: 202 Accepted

POST /webhooks/whatsapp
  Purpose: Receive webhooks from Meta
  Auth: None for Meta (detected by user-agent), Bearer token for others
  Body: Standard Meta webhook format
  Response: 200 OK

GET /webhooks/whatsapp
  Purpose: Webhook verification for Meta
  Auth: Verify token matching
  Params: hub.mode, hub.verify_token, hub.challenge
  Response: Echo challenge or 403

ADMIN ENDPOINTS (Require ADMIN_TOKEN header):

GET /admin.html
  Purpose: Admin dashboard web interface
  Features: Tickets, lifts, contacts, messages view

GET /intelligence.html
  Purpose: Executive intelligence dashboard
  Features: Contact performance, time series, visual analytics

GET /agent-chat.html
  Purpose: Live chat interface for call center agents
  Features: WhatsApp ↔ Agent messaging

AI TROUBLESHOOTING API (Require AI_ASSISTANT_TOKEN header):

GET /api/troubleshoot/diagnostics
  Purpose: System health check
  Returns: Database status, counts, environment, uptime

GET /api/troubleshoot/logs/application
  Purpose: Application log buffer (last 1000 entries)
  Params: level, search, since, limit
  Returns: Timestamped log entries

GET /api/troubleshoot/logs
  Purpose: Event log from database
  Params: event_type, ticket_id, lift_id, since, limit
  Returns: Structured event records

GET /api/troubleshoot/tickets
  Purpose: Ticket list with filtering
  Params: status, search, since, limit, offset
  Returns: Paginated ticket list with lift names

GET /api/troubleshoot/messages
  Purpose: Message history with wa_id tracking
  Params: lift_id, ticket_id, direction, type, status, since, limit
  Returns: Full message records with delivery status

GET /api/troubleshoot/lifts
  Purpose: Lift inventory
  Returns: All lifts with contact counts, open ticket counts

GET /api/troubleshoot/contacts
  Purpose: Contact directory
  Returns: All contacts with lift associations

GET /api/troubleshoot/metrics
  Purpose: System metrics and statistics
  Returns: Message counts, ticket stats, response rates

GET /api/troubleshoot/analytics/timeseries
  Purpose: Time-series data for graphing
  Params: metric, interval (1h, 1d, 7d, 30d)
  Returns: Time-bucketed data points

GET /api/troubleshoot/events/recent
  Purpose: Recent events (polling endpoint)
  Params: since (timestamp), types (comma-separated)
  Returns: Events since timestamp

CONTACT PERFORMANCE API:

GET /api/contact-performance/summary
  Purpose: Contact response statistics
  Returns: Response rates, average times per contact

GET /api/contact-performance/details/:contactId
  Purpose: Individual contact performance
  Returns: Detailed stats for specific contact

GET /api/contact-performance/leaderboard
  Purpose: Ranked contact performance
  Params: metric (response_rate, avg_response_time)
  Returns: Sorted contact list

CHAT API (Require ADMIN_TOKEN):

GET /api/chat/conversations
  Purpose: List all active chat conversations
  Returns: Tickets with chat activity, unread counts

GET /api/chat/:ticketId/messages
  Purpose: Get chat history for ticket
  Returns: All messages for ticket

POST /api/chat/:ticketId/send
  Purpose: Send message from agent to contact
  Body: { message, agent_name }
  Action: Sends via Meta Graph API

POST /api/chat/:ticketId/mark-read
  Purpose: Mark messages as read by agent
  Returns: Success confirmation

================================================================================
7. DATABASE SCHEMA (KEY TABLES)
================================================================================

LIFTS TABLE:
  id (serial primary key)
  msisdn (text) - Phone number of lift device
  site_name (text)
  building (text)
  created_at (timestamp)

CONTACTS TABLE:
  id (uuid primary key)
  display_name (text)
  primary_msisdn (text) - WhatsApp number
  created_at (timestamp)

LIFT_CONTACTS (Junction Table):
  lift_id (integer) → lifts.id
  contact_id (uuid) → contacts.id
  relation (text) - e.g., "primary", "secondary"

TICKETS TABLE:
  id (serial primary key)
  lift_id (integer) → lifts.id
  sms_id (text) - Original SMS ID
  status (text) - 'open' or 'closed'
  button_clicked (text) - test, maintenance, entrapment_awaiting_confirmation, entrapment_yes, entrapment_no
  responded_by (uuid) → contacts.id
  resolved_at (timestamp)
  notes (text)
  created_at (timestamp)
  updated_at (timestamp)
  reminder_count (integer) - Number of reminders sent
  last_reminder_at (timestamp)
  closure_note (text) - Auto-close reason
  ticket_reference (text) - e.g., "TEST-BUILDING-TKT41"
  message_id (text) - WhatsApp message ID (wa_id)
  agent_requested (boolean) - Live chat flag

TICKET_MESSAGES TABLE:
  id (serial primary key)
  ticket_id (integer) → tickets.id
  contact_id (uuid) → contacts.id
  message_id (text) - WhatsApp wa_id
  message_kind (text) - 'initial', 'reminder', 'followup'
  created_at (timestamp)

PURPOSE: Precise button click matching
When button clicked, context.id matches message_id to find exact ticket

MESSAGES TABLE:
  id (serial primary key)
  lift_id (integer) → lifts.id
  msisdn (text)
  direction (text) - 'inbound' or 'outbound'
  type (text) - 'sms', 'wa_template', 'wa_text', 'wa_interactive'
  status (text) - 'sent', 'delivered', 'read', 'failed'
  body (text)
  wa_id (text) - WhatsApp message ID
  meta (jsonb) - Additional metadata
  created_at (timestamp)

EVENT_LOG TABLE:
  id (serial primary key)
  event_type (text) - See event types below
  ticket_id (integer)
  lift_id (integer)
  contact_id (uuid)
  metadata (jsonb)
  error (text)
  request_payload (jsonb)
  response_payload (jsonb)
  created_at (timestamp)

EVENT TYPES:
- ticket_created
- wa_template_ok / wa_template_fail
- button_click_contact_not_found
- ticket_closed
- initial_alert_reminder_sent
- entrapment_followup_sent
- entrapment_reminder_sent
- webhook_whatsapp_received
- webhook_not_button_click
- webhook_auth_failed
- ai_api_access

CHAT_MESSAGES TABLE:
  id (serial primary key)
  ticket_id (integer) → tickets.id
  from_number (text)
  to_number (text)
  message (text)
  direction (text) - 'inbound' or 'outbound'
  agent_name (text)
  read_by_agent (boolean)
  created_at (timestamp)

================================================================================
8. MESSAGE FLOW ARCHITECTURE DETAILED
================================================================================

FLOW 1: EMERGENCY ALERT → TEST BUTTON
Timeline: ~5 seconds

1. SMS arrives at /sms/direct
2. Ticket created (status: open)
3. Template sent via Meta Graph API
4. User receives WhatsApp within 2 seconds
5. User clicks Test button
6. Meta sends webhook to /webhooks/whatsapp
7. System processes: button_clicked = "test"
8. Text message sent: "Thank you for confirming this is a test..."
9. Ticket closed (status: closed, resolved_at: NOW())
10. Event logged: ticket_closed

FLOW 2: EMERGENCY ALERT → MAINTENANCE BUTTON
Timeline: ~5 seconds

Same as Test flow but:
- button_clicked = "maintenance"
- Different confirmation message
- Ticket closed immediately

FLOW 3: EMERGENCY ALERT → ENTRAPMENT BUTTON → YES
Timeline: ~17 seconds (if immediate YES click)

1. SMS arrives at /sms/direct
2. Ticket created (status: open)
3. Template sent via Meta Graph API
4. User receives WhatsApp
5. User clicks Entrapment button
6. Meta sends webhook
7. System processes: button_clicked = "entrapment_awaiting_confirmation"
8. Interactive message sent with YES button: "Has service provider been notified?"
9. Event logged: entrapment_followup_sent
10. User clicks YES
11. Meta sends second webhook
12. System processes: button_clicked = "entrapment_yes"
13. Confirmation text sent
14. Ticket closed (status: closed)
15. Event logged: ticket_closed

FLOW 4: EMERGENCY ALERT → NO RESPONSE → AUTO-CLOSE
Timeline: ~181 seconds (3 minutes)

1. SMS arrives, ticket created, template sent
2. No button clicked
3. After 60s: Reminder 1 sent (text message: "REMINDER 1/3...")
4. After 120s: Reminder 2 sent (text message: "REMINDER 2/3...")
5. After 180s: Reminder 3 sent (text message: "REMINDER 3/3...")
6. After 181s: Auto-close triggered
7. Closure text sent: "This emergency ticket has been automatically closed..."
8. Ticket: status = 'closed', closure_note = "Auto-closed: No response..."

FLOW 5: ENTRAPMENT → NO YES CLICK → AUTO-CLOSE WITH ESCALATION
Timeline: ~181 seconds after entrapment click

1. Entrapment clicked
2. YES button sent
3. No YES click
4. After 60s: Entrapment reminder 1
5. After 120s: Entrapment reminder 2
6. After 180s: Entrapment reminder 3
7. After 181s: Auto-close with escalation note
8. Critical escalation logged

FLOW 6: LIVE CHAT (AGENT ↔ WHATSAPP)
Triggered: Contact types "agent" in WhatsApp OR agent initiates

1. Contact sends text message to WhatsApp number
2. Meta webhook arrives at /webhooks/whatsapp
3. System detects text message (not button)
4. If text contains "agent": tickets.agent_requested = true
5. Message saved to chat_messages table
6. Agent sees notification in /agent-chat.html
7. Agent types response, clicks Send
8. Message sent via Meta Graph API (text message)
9. Contact receives in WhatsApp
10. All messages logged for compliance

================================================================================
9. TROUBLESHOOTING GUIDE
================================================================================

ISSUE: Templates not sending

CHECK:
1. Is META_ACCESS_TOKEN set in Replit Secrets?
   → Run: echo "Token: ${META_ACCESS_TOKEN:0:10}..." on Replit
   → Should show: Token: EAALmIlR8G...

2. Is token expired?
   → Test with: curl -X GET "https://graph.facebook.com/v23.0/me" \
                  -H "Authorization: Bearer $META_ACCESS_TOKEN"
   → Should return app info, not error

3. Check application logs:
   → https://gplifts.woosh.ai/api/troubleshoot/logs/application?level=error&limit=10
   → Look for "meta_template_error" or "meta_auth"

4. Verify template exists in Meta:
   → Go to Meta Business Manager → WhatsApp → Message Templates
   → Confirm growthpoint_lift_emergency_v2 is APPROVED

ISSUE: Button clicks not working

CHECK:
1. Is phone number subscribed to app?
   → Run: curl -X GET "https://graph.facebook.com/v23.0/620143974365970/subscribed_apps" \
            -H "Authorization: Bearer $META_ACCESS_TOKEN"
   → Should return: {"data": [...]} with app listed

2. Are webhook fields subscribed in Meta?
   → Go to App → WhatsApp → Configuration
   → Verify "messages" field shows "Subscribed"

3. Are webhooks arriving?
   → Check: https://gplifts.woosh.ai/api/troubleshoot/logs?event_type=webhook_whatsapp_received&limit=10
   → Should see recent webhooks

4. Is webhook authentication blocking?
   → Check logs for "webhook_auth_failed"
   → Verify WEBHOOK_AUTH_TOKEN is NOT set (Meta doesn't use it)

5. Check button payload format:
   → View webhook payload in logs
   → Should have: message.type = "button" and message.button.payload

ISSUE: Auto-close not working

CHECK:
1. Is cron job running?
   → Check logs for "checkPendingReminders" every 60 seconds
   → Should see: "[reminder] Checking for pending reminders..."

2. Check for SQL errors:
   → Look for "could not determine data type" errors
   → Verify WHERE id = $1 (not $2) in auto-close queries

3. Verify reminder count logic:
   → Tickets should have reminder_count = 0, 1, 2, 3
   → Auto-close triggers when reminder_count >= 3

ISSUE: Webhooks being rejected (401 errors)

FIX:
1. Check if WEBHOOK_AUTH_TOKEN exists in Replit Secrets
2. If yes, DELETE it (Meta doesn't send Authorization headers)
3. Code detects Meta by user-agent: "facebookexternalua"
4. Restart server after removing token

ISSUE: Live chat not working

CHECK:
1. Is agent authenticated?
   → Agent must enter ADMIN_TOKEN on first visit
   → Token stored in localStorage

2. Are chat messages being saved?
   → Query: SELECT * FROM chat_messages ORDER BY created_at DESC LIMIT 10
   → Should see inbound/outbound messages

3. Is META_ACCESS_TOKEN set?
   → Live chat sends messages via Meta Graph API
   → Same token as templates

ISSUE: Intelligence dashboard empty

CHECK:
1. Are there closed tickets with responses?
   → Query: SELECT COUNT(*) FROM tickets WHERE button_clicked IS NOT NULL
   → Need data for analytics

2. Is contact performance API working?
   → Test: GET /api/contact-performance/summary with ADMIN_TOKEN
   → Should return response rates

================================================================================
10. TESTING PROCEDURES
================================================================================

DAILY HEALTH CHECK:

1. System Diagnostics:
curl -H "X-AI-Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ3b29zaC5haSIsInN1YiI6Im1hcmNAdm9vc2guYWkiLCJpYXQiOjE3MNTkyNDc4ODAsInNjb3BlIjoiYWRtaW4ifQ._q0Gv0aK1l1sXkJYx2Tb3Zk2r8V5yQYhQyqP8w1Z0b4" \
  https://gplifts.woosh.ai/api/troubleshoot/diagnostics

Expected: database.connected = true, all environment vars = true

2. Recent Errors:
curl -H "X-AI-Token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ3b29zaC5haSIsInN1YiI6Im1hcmNAdm9vc2guYWkiLCJpYXQiOjE3MNTkyNDc4ODAsInNjb3BlIjoiYWRtaW4ifQ._q0Gv0aK1l1sXkJYx2Tb3Zk2r8V5yQYhQyqP8w1Z0b4" \
  "https://gplifts.woosh.ai/api/troubleshoot/logs/application?level=error&limit=5"

Expected: logs array empty or only old errors

3. Template Test:
Send test SMS, verify WhatsApp arrives within 2 seconds with buttons

4. Button Test:
Click Test button, verify closure message arrives immediately

END-TO-END TEST (Full Entrapment Flow):

1. Send SMS to lift number with note "E2E Test"
2. Verify ticket created in database
3. Verify WhatsApp template received with 3 buttons
4. Click Entrapment button
5. Verify "Has service provider been notified?" message with YES button
6. Click YES button
7. Verify final confirmation message
8. Verify ticket status = 'closed' in database
9. Verify button_clicked = 'entrapment_yes'
10. Total time should be < 30 seconds

REGRESSION TEST CHECKLIST:

Test Button Flow:
□ SMS received → ticket created
□ Template sent successfully
□ Test button clicked
□ Closure message received
□ Ticket closed in < 10 seconds

Maintenance Button Flow:
□ Same as Test but with Maintenance button
□ Different confirmation message

Entrapment Flow:
□ Entrapment button clicked
□ YES button message received
□ YES button clicked
□ Final confirmation received
□ Ticket closed with entrapment_yes

Auto-Close Flow:
□ SMS received, template sent
□ No button clicked
□ Reminder 1 at 60s
□ Reminder 2 at 120s
□ Reminder 3 at 180s
□ Auto-close message at 181s
□ Ticket status = closed

================================================================================
11. DEPLOYMENT PROCEDURES
================================================================================

MAKING CODE CHANGES:

1. Make changes on local machine (Cursor/VS Code)
2. Test locally if possible
3. Commit: git add [files]
4. Commit: git commit -m "descriptive message"
5. Push: git push origin master
6. On Replit: git pull
7. Replit auto-restarts server
8. Run health check to verify
9. Run smoke test (send test SMS)

EMERGENCY ROLLBACK:

If deployment breaks production:

1. Find last working commit:
   git log --oneline -10

2. Revert to it:
   git revert HEAD --no-edit
   git push origin master

3. On Replit:
   git pull

4. Or hard reset (DANGEROUS):
   git reset --hard {commit-hash}
   git push origin master --force
   (Only if revert fails)

UPDATING ENVIRONMENT VARIABLES:

On Replit:
1. Click Secrets tab (lock icon)
2. Edit existing secret or add new
3. Server auto-restarts when secrets change
4. Verify with health check

Never commit secrets to git!
Never share tokens publicly!

================================================================================
12. OPERATIONAL LIMITS & QUOTAS
================================================================================

META GRAPH API RATE LIMITS:
- Messaging: 1000 messages per day per phone number (tier 1)
- Can be increased with Meta approval
- Monitor usage in Meta Business Manager

WHATSAPP PRICING:
Templates (Outside 24-hour window):
  - First 1000/month: FREE
  - After 1000: Varies by country (~$0.05/message for utility)

Session Messages (Within 24-hour window):
  - Completely FREE
  - No limit on volume
  - Includes text, interactive buttons

When Session Opens:
  - User sends any message to business
  - Template delivered to user
  - Button clicked by user
  - 24-hour window starts from last user interaction

Current Strategy:
  - Initial alert: Template (may be charged if outside window)
  - All follow-ups: Session messages (FREE)
  - Reminders: Text messages (FREE within session)
  - Auto-close: Text message (FREE within session)

DATABASE LIMITS (Neon.tech):
- Storage: Check plan limit
- Connections: Pooled (default max 20)
- Monitor via diagnostics API

================================================================================
13. SECURITY ARCHITECTURE
================================================================================

AUTHENTICATION LAYERS:

Layer 1: SMS Webhook
  Method: HMAC-SHA256 signature validation
  Secret: process.env.HMAC_SECRET
  Validates: SMS provider is authentic Vodacom

Layer 2: Meta Webhook
  Method: User-agent detection (facebookexternalua)
  Additional: X-Hub-Signature validation (optional)
  Note: Meta webhooks have no Authorization header

Layer 3: Admin API
  Method: Bearer token (ADMIN_TOKEN)
  Header: X-AI-Token: {ADMIN_TOKEN}
  Access: Full read/write access

Layer 4: AI Assistant API  
  Method: Bearer token (AI_ASSISTANT_TOKEN)
  Header: X-AI-Token: {AI_ASSISTANT_TOKEN}
  Access: Read-only, rate limited (30 req/min)
  Enforcement: enforceReadOnly middleware blocks POST/PUT/DELETE

Layer 5: Chat API
  Method: Same as Admin API
  Requires: ADMIN_TOKEN
  Purpose: Agent authentication for live chat

AUDIT TRAIL:
All AI API access logged to event_log table:
- Timestamp
- Endpoint accessed
- Query parameters
- IP address

All webhook access logged:
- Full payload
- Processing result
- Any errors

================================================================================
14. APPROVED WHATSAPP TEMPLATES
================================================================================

TEMPLATE 1: growthpoint_lift_emergency
Status: APPROVED
Parameters: None
Language: English (en)
Category: UTILITY
Buttons: Test, Maintenance, Entrapment

Content:
"Lift Emergency Message
An emergency button has been pressed.

Kind Regards
Growthpoint Lift Management System"

Usage: Basic emergency alert without location details

TEMPLATE 2: growthpoint_lift_emergency_v2
Status: APPROVED
Parameters: 1 (location/ticket reference)
Language: English (en)
Category: UTILITY
Buttons: Test, Maintenance, Entrapment

Content:
"Lift Emergency Message
An emergency button has been pressed.

{{1}}

Kind Regards
Growthpoint Lift Management System"

Usage: Enhanced alert with location parameter
Example: [TEST-BUILDING-TKT41] Test Site - Test Building

TEMPLATE 3: growthpoint_entrapment_confirmed (IF EXISTS)
Status: Check Meta Business Manager
Parameters: TBD
Language: English (en)
Category: UTILITY

Check if this template is approved and what parameters it requires.

CREATING NEW TEMPLATES:

1. Go to Meta Business Manager
2. WhatsApp → Message Templates
3. Click "Create Template"
4. Choose category: UTILITY (for emergency alerts)
5. Add content and buttons
6. Submit for approval
7. Wait 15 minutes to 24 hours for Meta review
8. Once approved, use immediately

================================================================================
15. MONITORING & ALERTING
================================================================================

REAL-TIME MONITORING:

Application Logs:
GET https://gplifts.woosh.ai/api/troubleshoot/logs/application?limit=50

Watch for:
- meta_template_error
- meta_auth errors
- webhook_auth_failed
- Database connection errors

System Metrics:
GET https://gplifts.woosh.ai/api/troubleshoot/metrics

Monitor:
- Open ticket count (should be low)
- Message delivery rate (should be >95%)
- Response time averages

Recent Events:
GET https://gplifts.woosh.ai/api/troubleshoot/events/recent?interval=1h

Check:
- wa_template_fail events (should be zero)
- ticket_created vs ticket_closed ratio
- entrapment escalations

DAILY CHECKS:

Morning:
1. Run diagnostics API
2. Check error logs (last 24h)
3. Verify open tickets < 5
4. Review contact performance summary

Evening:
1. Check message delivery rates
2. Review any entrapment escalations
3. Verify auto-close working correctly
4. Check for any failed templates

Weekly:
1. Review contact performance leaderboard
2. Analyze time-series trends
3. Check template approval status in Meta
4. Verify access tokens haven't expired

Monthly:
1. Review Meta messaging quota usage
2. Analyze response patterns
3. Update templates if needed
4. System performance optimization

================================================================================
16. META GRAPH API REFERENCE (QUICK ACCESS)
================================================================================

BASE URL: https://graph.facebook.com/v23.0

AUTHENTICATION:
All requests require: Authorization: Bearer {META_ACCESS_TOKEN}

SEND TEMPLATE:
POST /{PHONE_NUMBER_ID}/messages
Body: {
  "messaging_product": "whatsapp",
  "to": "27824537125",
  "type": "template",
  "template": {
    "name": "growthpoint_lift_emergency_v2",
    "language": {"code": "en"},
    "components": [{
      "type": "body",
      "parameters": [{"type": "text", "text": "Your text here"}]
    }]
  }
}

SEND INTERACTIVE BUTTONS:
POST /{PHONE_NUMBER_ID}/messages
Body: {
  "messaging_product": "whatsapp",
  "to": "27824537125",
  "type": "interactive",
  "interactive": {
    "type": "button",
    "body": {"text": "Your question here"},
    "action": {
      "buttons": [
        {"type": "reply", "reply": {"id": "button_id", "title": "YES"}}
      ]
    }
  }
}

SEND TEXT MESSAGE:
POST /{PHONE_NUMBER_ID}/messages
Body: {
  "messaging_product": "whatsapp",
  "to": "27824537125",
  "type": "text",
  "text": {"body": "Your message here"}
}

WEBHOOK PAYLOAD (Button Click):
{
  "object": "whatsapp_business_account",
  "entry": [{
    "id": "620143974365970",
    "changes": [{
      "field": "messages",
      "value": {
        "messaging_product": "whatsapp",
        "metadata": {
          "phone_number_id": "861610750363214",
          "display_phone_number": "27690232755"
        },
        "messages": [{
          "from": "27824537125",
          "id": "wamid.HBgL...",
          "timestamp": "1759404631",
          "type": "button",
          "button": {
            "text": "Entrapment",
            "payload": "Entrapment"
          },
          "context": {
            "id": "wamid.HBgL...",  ← ORIGINAL MESSAGE ID
            "from": "27690232755"
          }
        }]
      }
    }]
  }]
}

EXTRACTING BUTTON CLICK:
message.type === "button"
message.button.payload → Which button clicked
message.context.id → Original message to match ticket
message.from → User's phone number

================================================================================
17. KNOWN ISSUES & WORKAROUNDS
================================================================================

ISSUE: Meta Access Token Expires
SYMPTOM: 401 errors when sending messages
FIX: Generate new token in Meta Business Manager, update META_ACCESS_TOKEN secret
PREVENTION: Use System User tokens (long-lived), not temporary tokens

ISSUE: Replit Secrets Not Updating
SYMPTOM: Changes to secrets don't take effect
FIX: Stop server, update secret, restart manually
WORKAROUND: Sometimes need to remove secret entirely, save, then re-add

ISSUE: WEBHOOK_AUTH_TOKEN Blocking Meta
SYMPTOM: webhook_auth_failed errors, Meta webhooks rejected
FIX: Remove WEBHOOK_AUTH_TOKEN from Replit Secrets completely
NOTE: Meta detected by user-agent, doesn't need auth token

ISSUE: Button Clicks Not Matching Tickets
SYMPTOM: Webhook arrives but ticket not found
FIX: Check ticket_messages table has message_id
QUERY: SELECT * FROM ticket_messages WHERE message_id = 'wamid.HBgL...'
ENSURE: message_id saved when template sent

ISSUE: Reminder Count Wrong
SYMPTOM: Too many or too few reminders
FIX: Check last_reminder_at timestamp logic
VERIFY: cron job running every 60 seconds

================================================================================
18. CONTACT INFORMATION
================================================================================

SYSTEM ADMINISTRATORS:
Marc: marc@voosh.ai (Primary contact, system owner)

AI ASSISTANTS:
Augur: AI troubleshooting assistant (this system)
  Access: https://gplifts.woosh.ai/api/troubleshoot/*
  Token: AI_ASSISTANT_TOKEN

Beacon: Woosh Bridge AI assistant
  Access: https://wa.woosh.ai/api/ai/troubleshoot/*
  Token: Same AI_ASSISTANT_TOKEN

Sentinel: Replit AI agent
  Access: Direct shell access on Replit
  Role: Infrastructure and deployment

META SUPPORT:
Business Support: business.facebook.com/help
WhatsApp API Docs: developers.facebook.com/docs/whatsapp
Rate Limit Issues: Request increase via Meta Business Manager

DATABASE PROVIDER:
Neon.tech PostgreSQL
Dashboard: Check Neon.tech console for connection details
Support: Neon.tech support portal

HOSTING:
Replit: replit.com
Project: woosh-lifts-replit
URL: https://gplifts.woosh.ai

================================================================================
19. QUICK REFERENCE COMMANDS
================================================================================

CHECK SYSTEM HEALTH:
curl -H "X-AI-Token: AI_TOKEN_HERE" https://gplifts.woosh.ai/api/troubleshoot/diagnostics | json_pp

VIEW RECENT ERRORS:
curl -H "X-AI-Token: AI_TOKEN_HERE" "https://gplifts.woosh.ai/api/troubleshoot/logs/application?level=error&limit=10" | json_pp

CHECK OPEN TICKETS:
curl -H "X-AI-Token: AI_TOKEN_HERE" "https://gplifts.woosh.ai/api/troubleshoot/tickets?status=open&limit=10" | json_pp

SEND TEST TEMPLATE (Replit):
curl -X POST "https://graph.facebook.com/v23.0/861610750363214/messages" \
  -H "Authorization: Bearer $META_ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "messaging_product": "whatsapp",
    "to": "27824537125",
    "type": "template",
    "template": {
      "name": "growthpoint_lift_emergency_v2",
      "language": {"code": "en"},
      "components": [{
        "type": "body",
        "parameters": [{"type": "text", "text": "[TEST] Test Site - Test Building"}]
      }]
    }
  }'

CHECK WEBHOOK SUBSCRIPTION:
curl -X GET "https://graph.facebook.com/v23.0/620143974365970/subscribed_apps" \
  -H "Authorization: Bearer $META_ACCESS_TOKEN"

SUBSCRIBE PHONE TO APP:
curl -X POST "https://graph.facebook.com/v23.0/620143974365970/subscribed_apps" \
  -H "Authorization: Bearer $META_ACCESS_TOKEN"

VIEW RECENT WEBHOOKS:
curl -H "X-AI-Token: AI_TOKEN_HERE" "https://gplifts.woosh.ai/api/troubleshoot/logs?event_type=webhook_whatsapp_received&limit=5" | json_pp

================================================================================
20. DAILY OPERATIONS CHECKLIST
================================================================================

EVERY MORNING:

□ Check system diagnostics (all green?)
□ Review error logs from last 24 hours
□ Verify no stuck open tickets
□ Check contact performance summary
□ Verify Meta access token still valid

BEFORE DEMO/PRESENTATION:

□ Run end-to-end test (SMS → Entrapment → YES)
□ Verify dashboards loading
□ Check intelligence graphs displaying
□ Test live chat interface
□ Confirm all buttons working
□ Have backup plan if issues

AFTER CHANGES/DEPLOYMENT:

□ git pull on Replit
□ Wait for server restart (30 seconds)
□ Run diagnostics API
□ Check error logs
□ Send test SMS
□ Click test button
□ Verify closure message

WEEKLY MAINTENANCE:

□ Review contact response rates
□ Analyze entrapment patterns
□ Check for any template failures
□ Verify database performance
□ Review audit logs for security

================================================================================
21. ARCHITECTURE DECISIONS LOG
================================================================================

OCTOBER 2, 2025 - CRITICAL DECISIONS:

Decision 1: Direct Meta Integration vs Woosh Bridge
Chose: Direct Meta Graph API integration
Reason: 
  - Woosh Bridge webhook forwarding unreliable
  - Direct integration gives full control
  - Eliminates dependency and single point of failure
  - Faster response times (no proxy hop)
  - Simpler debugging

Decision 2: Meta Webhook Authentication
Chose: User-agent detection instead of auth token
Reason:
  - Meta doesn't send Authorization headers
  - WEBHOOK_AUTH_TOKEN was blocking all Meta webhooks
  - User-agent "facebookexternalua" is reliable Meta identifier
  - More compatible with Meta's webhook delivery

Decision 3: Template Sending Method
Chose: Meta Graph API v23.0/{phoneId}/messages
Reason:
  - Direct, documented, stable Meta API
  - No intermediary services
  - Real-time error feedback
  - Better observability

Decision 4: Button Click Matching Strategy
Chose: context.id matching via ticket_messages table
Reason:
  - Precise ticket identification
  - Handles multiple simultaneous tickets
  - Works with concurrent emergencies
  - Reliable even with message delays

================================================================================
22. SUCCESS METRICS
================================================================================

RESPONSE TIME BENCHMARKS:
Test Button: < 10 seconds (SMS to closure)
Maintenance Button: < 10 seconds
Entrapment Full Flow: < 30 seconds (SMS to final confirmation)
Template Delivery: < 2 seconds (send to delivered)

RELIABILITY TARGETS:
Template Delivery Rate: > 99%
Button Click Processing: > 99%
Webhook Reception: > 99%
Auto-Close Accuracy: 100%

CURRENT PERFORMANCE (Oct 2, 2025):
✅ Template delivery: 100% (after Meta integration)
✅ Button click processing: 100% (Test 41 successful)
✅ End-to-end time: 17 seconds (Test 41)
✅ System uptime: 2+ hours stable
✅ Zero errors after Meta migration

================================================================================
23. TROUBLESHOOTING DECISION TREE
================================================================================

TEMPLATE NOT SENDING:

Is META_ACCESS_TOKEN set?
  NO → Add to Replit Secrets
  YES → Is token valid?
    NO → Generate new token in Meta
    YES → Is template approved in Meta?
      NO → Wait for approval or use different template
      YES → Check error logs for specific error

BUTTON CLICK NOT WORKING:

Did you receive the template?
  NO → Fix template sending first (see above)
  YES → Did you click the button?
    YES → Check if webhook arrived:
      Check: /api/troubleshoot/logs?event_type=webhook_whatsapp_received
      
      Webhook arrived?
        NO → Check Meta webhook configuration
          → Is phone subscribed? (subscribed_apps API)
          → Is messages field subscribed?
          → Test webhook from Meta console
        
        YES → Check if processed:
          → Look for button_clicked field in ticket
          → Check for errors in application logs
          → Verify contact found by phone number

WEBHOOK BEING REJECTED (401):

Check application logs for: webhook_auth_failed

Is WEBHOOK_AUTH_TOKEN set in Replit Secrets?
  YES → DELETE IT (Meta doesn't use auth tokens)
  NO → Check if user-agent detection working
    → Should log: "Meta webhook detected - skipping auth check"
    → If not, code may need update

AUTO-CLOSE NOT WORKING:

Check if cron job running:
  → Logs should show "[reminder] Checking for pending reminders..." every 60s
  
  Not running?
    → Check server uptime
    → Restart server if needed
  
  Running but not closing?
    → Check SQL errors in logs
    → Verify reminder_count incrementing
    → Check WHERE clause uses $1 not $2

================================================================================
24. DISASTER RECOVERY
================================================================================

SCENARIO 1: Complete System Down

1. Check Replit status: Is server running?
2. Check database: Can you connect?
   → psql $DATABASE_URL -c "SELECT 1"
3. Check error logs
4. If needed: Restart server on Replit
5. Run health check after restart

SCENARIO 2: Meta Access Token Expired

SYMPTOMS: All messages failing with 401 errors

FIX:
1. Generate new token in Meta Business Manager
2. Update META_ACCESS_TOKEN in Replit Secrets
3. Server will restart automatically
4. Test with curl command
5. Verify templates sending again

SCENARIO 3: Templates Sending But No Buttons Working

SYMPTOMS: Templates deliver, button clicks don't process

FIX:
1. Check webhook subscription:
   curl GET https://graph.facebook.com/v23.0/620143974365970/subscribed_apps
2. If not subscribed:
   curl POST https://graph.facebook.com/v23.0/620143974365970/subscribed_apps
3. Verify messages field subscribed in Meta console
4. Send test webhook from Meta
5. Check if webhook arrives at your endpoint

SCENARIO 4: Database Connection Lost

SYMPTOMS: All operations failing with database errors

FIX:
1. Check Neon.tech dashboard for outages
2. Verify DATABASE_URL still valid
3. Check connection from Replit:
   psql $DATABASE_URL -c "SELECT NOW()"
4. If credentials changed, update in Secrets
5. Restart server

SCENARIO 5: Stuck Open Tickets

SYMPTOMS: Tickets not auto-closing after 3 reminders

FIX:
1. Check cron job logs
2. Manually close if needed:
   UPDATE tickets SET status = 'closed', closure_note = 'Manual close', 
   resolved_at = NOW() WHERE id = XX
3. Review auto-close logic for bugs
4. Check reminder_count field incrementing

================================================================================
25. PERFORMANCE OPTIMIZATION NOTES
================================================================================

CURRENT OPTIMIZATIONS:

Database Queries:
- Indexed on: tickets.status, tickets.created_at
- Indexed on: messages.wa_id, messages.created_at
- JOIN optimizations for ticket + lift queries

Log Buffer:
- In-memory buffer: 1000 entries max
- Auto-trimming to prevent memory bloat
- Fast access for recent logs

Webhook Processing:
- Async processing (doesn't block Meta response)
- 200 OK returned immediately
- Processing happens in background
- Database logging after response sent

Rate Limiting:
- AI API: 30 requests/minute
- No limit on admin API
- No limit on webhooks (Meta controlled)

Caching:
- Dashboard data: No caching (real-time)
- Intelligence dashboard: Could add caching if slow
- Contact performance: Could cache for 5 minutes

FUTURE OPTIMIZATIONS:

If system grows:
1. Add Redis for session caching
2. Implement message queue for webhooks
3. Add database read replicas
4. Implement webhook retry queue
5. Add CDN for dashboard assets

================================================================================
26. COMPLIANCE & AUDIT TRAIL
================================================================================

DATA RETENTION:

Messages Table: Indefinite (all messages stored)
Event Log: Indefinite (complete audit trail)
Chat Messages: Indefinite (compliance requirement)
Tickets: Indefinite (historical analysis)

AUDIT CAPABILITIES:

Who responded to ticket?
  → tickets.responded_by links to contacts.id
  → tickets.responded_by_name for quick access

When was ticket created/closed?
  → tickets.created_at, tickets.resolved_at
  → Full timeline in event_log

What messages were sent?
  → messages table with direction, type, wa_id
  → Complete WhatsApp message history

What button was clicked?
  → tickets.button_clicked field
  → Context in webhook payloads

AI Access Audit:
  → All AI API calls logged to event_log
  → Event type: ai_api_access
  → Includes: path, query params, IP, timestamp

GDPR/POPIA COMPLIANCE:

Personal Data Stored:
- Contact names and phone numbers
- WhatsApp message content
- Response timestamps
- Location data (lift sites)

Data Subject Rights:
- Right to access: Query contacts and messages tables
- Right to deletion: DELETE from contacts, cascade to related records
- Right to portability: Export as JSON via API

================================================================================
27. CRISIS RESPONSE PROCEDURES
================================================================================

REAL ENTRAPMENT SITUATION:

If actual entrapment occurs:

1. System sends template automatically
2. Contacts receive WhatsApp with buttons
3. Contact clicks Entrapment
4. System asks: "Has service provider been notified?"
5. Contact must click YES to confirm

If NO response after 3 reminders:
  → Ticket auto-closes with critical note
  → Review closure_note for escalation
  → Manual call center follow-up recommended

If YES clicked:
  → Service provider confirmed notified
  → Ticket closes with success
  → System logs confirmation

ESCALATION MATRIX:

Level 1: Automated WhatsApp (System handles)
Level 2: Auto-close after 3 reminders (System handles)
Level 3: Review closure notes (Marc reviews)
Level 4: Manual call center intervention (if needed)
Level 5: On-site emergency response (client decision)

AFTER-HOURS SUPPORT:

System is fully automated 24/7:
- Templates send automatically
- Buttons process automatically
- Auto-close handles non-responses
- No manual intervention required

Manual intervention only needed for:
- System outages
- Meta API issues
- Database failures
- Configuration changes

================================================================================
28. VERSION HISTORY
================================================================================

Version 1.0 (September 30, 2025)
- Initial system deployment
- Basic SMS → WhatsApp flow
- Button click handling
- Woosh Bridge integration

Version 1.1 (October 1, 2025)
- Auto-close system implemented
- Reminder system (3 reminders)
- Intelligence dashboards
- Contact performance tracking
- AI troubleshooting API
- Live chat system

Version 1.2 (October 2, 2025) - CURRENT
- Direct Meta Graph API integration
- Removed Woosh Bridge dependency for critical path
- Fixed auto-close database bug ($2 → $1)
- Meta webhook authentication via user-agent detection
- Complete end-to-end working (Test 41 successful)
- Full independence achieved

================================================================================
29. RELATED DOCUMENTATION
================================================================================

In docs/ folder:
- AI_TROUBLESHOOTING_SETUP.md
- SECURITY_DOCUMENTATION.md
- ADVANCED_TROUBLESHOOTING_FEATURES.md
- CLIENT_SPECIFICATION.md
- DEPLOYMENT_READY.md

In projects/ folder:
- SENTINEL-INSTRUCTIONS.txt (Replit agent specific)

In root:
- README.md (Project overview)
- replit.md (Replit-specific setup)
- package.json (Dependencies)
- LICENSE

================================================================================
30. SUCCESS STORY - OCTOBER 2, 2025
================================================================================

MORNING (07:00):
- Templates failing with "Missing X-API-Key"
- Button clicks not working
- Webhooks being rejected
- Zero end-to-end tests passing
- Heavy dependency on Woosh Bridge

AFTERNOON (13:35):
- Templates sending via Meta Graph API ✅
- Button clicks processing ✅
- Webhooks flowing from Meta directly ✅
- Full end-to-end in 17 seconds ✅
- Complete independence achieved ✅

TESTS RUN: 41 iterations
TIME INVESTED: ~5 hours
BUGS FOUND: 5 critical issues
APIS INTEGRATED: Meta Graph API v23.0
SYSTEMS COORDINATED: 3 AIs (Augur, Beacon, Sentinel)

RESULT: Production-ready emergency response system with full observability,
complete independence, and battle-tested reliability.

KEY LEARNINGS:
1. Persistence pays off (41 tests to success)
2. Direct integration > proxy dependencies
3. Multi-AI collaboration is powerful
4. Proper instrumentation finds bugs in seconds
5. User-agent detection works better than auth tokens for Meta

================================================================================
END OF REFERENCE GUIDE
================================================================================

For daily context: Start each session by reviewing sections 2, 3, 4, and 9.

For troubleshooting: Go directly to sections 8, 17, or 23.

For new features: Reference sections 5, 6, and 16.

This document should be updated whenever significant changes occur.

Last successful end-to-end test: Test 41, October 2, 2025, 13:35 UTC
Status: PRODUCTION READY ✅

===============================================================================
