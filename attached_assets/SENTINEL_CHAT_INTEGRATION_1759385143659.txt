INTEGRATION INSTRUCTIONS FOR CALL CENTRE LIVE CHAT SYSTEM
Built by: Augur
For: Sentinel

================================================================================
OVERVIEW
================================================================================

This implements a simple call centre live chat system where agents can have real-time WhatsApp conversations with support technicians (Marc, James, etc.) during emergencies.

How it works:
1. Support tech receives emergency WhatsApp alert
2. Tech clicks button or types "Agent" to request call centre help
3. Call centre agent sees notification in web dashboard
4. Agent and tech chat via WhatsApp (all FREE session messages)
5. All conversation saved to database for compliance


================================================================================
FILES CREATED
================================================================================

1. src/routes/chat.js - Chat API endpoints
2. database/chat_schema.sql - Database schema
3. public/agent-chat.html - Agent web interface


================================================================================
STEP 1: RUN DATABASE MIGRATION
================================================================================

Execute the SQL in database/chat_schema.sql to create:
- chat_messages table (stores all chat messages)
- tickets.agent_requested column (flags when tech requests agent)
- Necessary indexes for performance

This is idempotent and safe to run multiple times.


================================================================================
STEP 2: UPDATE WEBHOOK HANDLER IN src/server.js
================================================================================

The current webhook at POST /webhooks/whatsapp only handles button clicks.
We need to ALSO handle plain text messages.

LOCATION: Around line 724-1071 in src/server.js

FIND the section that checks message type:

if (message?.type === 'button' && message.button) {
  // Button handling...
} else if (message?.type === 'interactive' && message.interactive?.type === 'button_reply') {
  // Meta format button...
} else {
  // Currently just returns 'not a button click'
}

ADD text message handling in the else block:

} else if (message?.type === 'text' && message.text?.body) {
  // Handle text message
  const textMessage = message.text.body;
  const fromNumber = message.from;
  
  console.log('[webhook/whatsapp] Text message received:', { from: fromNumber, text: textMessage });
  
  // Find contact by WhatsApp number
  const contactResult = await query(
    'SELECT * FROM contacts WHERE primary_msisdn = $1',
    [fromNumber]
  );
  
  if (contactResult.rows.length === 0) {
    console.log('[webhook/whatsapp] Contact not found for text message:', fromNumber);
    return res.status(200).json({ status: 'ok', processed: false, reason: 'contact_not_found' });
  }
  
  const contact = contactResult.rows[0];
  
  // Find most recent open ticket for this contact
  const ticketResult = await query(
    `SELECT t.*, COALESCE(l.site_name || ' - ' || l.building, l.building, 'Lift ' || l.id) as lift_name
     FROM tickets t
     JOIN lifts l ON t.lift_id = l.id
     JOIN lift_contacts lc ON t.lift_id = lc.lift_id
     WHERE lc.contact_id = $1 
       AND t.status = 'open'
       AND t.created_at > NOW() - INTERVAL '6 hours'
     ORDER BY t.created_at DESC
     LIMIT 1`,
    [contact.id]
  );
  
  if (ticketResult.rows.length === 0) {
    console.log('[webhook/whatsapp] No recent open ticket for contact:', contact.id);
    return res.status(200).json({ status: 'ok', processed: false, reason: 'no_open_ticket' });
  }
  
  const ticket = ticketResult.rows[0];
  
  // Save text message to chat_messages
  await query(
    `INSERT INTO chat_messages (ticket_id, from_number, to_number, message, direction, created_at)
     VALUES ($1, $2, $3, $4, 'inbound', NOW())`,
    [ticket.id, fromNumber, 'system', textMessage]
  );
  
  console.log(`[webhook/whatsapp] Saved text message to ticket ${ticket.id}`);
  
  // Check if message contains "agent" keyword (case-insensitive)
  if (textMessage.toLowerCase().includes('agent')) {
    await query(
      `UPDATE tickets SET agent_requested = true WHERE id = $1`,
      [ticket.id]
    );
    console.log(`[webhook/whatsapp] Agent requested for ticket ${ticket.id}`);
    
    await query(
      `INSERT INTO event_log (event_type, ticket_id, contact_id, metadata, created_at)
       VALUES ($1, $2, $3, $4, NOW())`,
      ['agent_requested', ticket.id, contact.id, JSON.stringify({ message: textMessage, from: contact.display_name })]
    );
  }
  
  return res.status(200).json({ 
    status: 'ok', 
    processed: true,
    ticket_id: ticket.id,
    message_saved: true
  });
} else {
  // Keep existing 'not a button click' handling
  ...


================================================================================
STEP 3: MOUNT CHAT ROUTES IN src/server.js
================================================================================

LOCATION: After line 88 where other routes are mounted

ADD:
const chatRoutes = require('./routes/chat');

Then mount it:
app.use('/api/chat', chatRoutes);


================================================================================
STEP 4: ADD SYSTEM MESSAGE LOGGING (OPTIONAL BUT RECOMMENDED)
================================================================================

When ticket is created, log the initial alert as a chat message for context:

In the ticket creation code (around line 309 or 509), after ticket is created, add:

await query(
  `INSERT INTO chat_messages (ticket_id, from_number, to_number, message, direction, created_at)
   VALUES ($1, 'system', $2, $3, 'outbound', NOW())`,
  [ticket.id, lift.msisdn, `Emergency alert sent for ${lift.site_name || 'Lift'} - ${lift.building || 'Building'}`]
);

This gives agents context when viewing the conversation.


================================================================================
TESTING THE SYSTEM
================================================================================

1. Run database migration (chat_schema.sql)
2. Restart server
3. Open: https://gplifts.woosh.ai/agent-chat.html
4. Send test SMS to create ticket
5. From WhatsApp, send text message: "Agent I need help"
6. Dashboard should show ticket with notification badge
7. Agent clicks ticket, types response, clicks Send
8. Response appears in WhatsApp
9. All messages saved to database


================================================================================
FEATURES INCLUDED
================================================================================

- Real-time conversation list (auto-refresh every 5 seconds)
- Unread message badges
- Agent request detection (keyword: "agent")
- Simple chat interface
- Message history
- Session-based messaging (FREE within 24 hours)
- Full audit trail in database
- Mobile-responsive design


================================================================================
SECURITY NOTES
================================================================================

- Uses same authentication as other admin routes (ADMIN_TOKEN or AI_ASSISTANT_TOKEN)
- All messages logged to database for compliance
- Agent name captured for accountability
- Read receipts tracked (read_by_agent flag)


================================================================================
COST NOTES
================================================================================

All messages within 24-hour session window are FREE (utility messages).
This means once a tech receives the initial template alert, all subsequent chat is free.


================================================================================
NEXT STEPS AFTER MVP
================================================================================

Future enhancements (not in this build):
- Typing indicators
- Message delivery status
- Multi-agent support
- File/image sharing
- Quick reply templates
- Agent performance tracking
- Conversation analytics


================================================================================
QUESTIONS FOR MARC
================================================================================

None - all assumptions confirmed. Ready to deploy!

