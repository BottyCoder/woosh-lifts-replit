WEBHOOK PAYLOAD STRUCTURE FOR BUTTON CLICKS
When a user taps an interactive button on WhatsApp, GrowthPoint receives the FULL Meta Graph API webhook payload. Woosh Bridge forwards it exactly as Meta sends it - no changes, no transformations.
FULL JSON STRUCTURE:
The webhook payload has this structure:
Top level has "object" field with value "whatsapp_business_account"
An "entry" array containing one or more entry objects
Each entry has an "id" (the WABA ID) and a "changes" array
Each change has a "value" object and a "field" (usually "messages")
The value object contains:
messaging_product: "whatsapp"
metadata: object with display_phone_number and phone_number_id
contacts: array with user profile info (name and wa_id)
messages: array with the actual message data
KEY FIELDS FOR BUTTON CLICKS:
Button ID (what you defined when creating the button):
Path: body.entry[0].changes[0].value.messages[0].interactive.button_reply.id
Example value: "get_deals", "option_1", "book_service"
Button Title (the text shown on the button):
Path: body.entry[0].changes[0].value.messages[0].interactive.button_reply.title
Example value: "Get Deals", "Option 1", "Book Service"
User's Phone Number (who clicked the button):
Path: body.entry[0].changes[0].value.messages[0].from
Example value: "27821234567"
Alternative path for user ID:
Path: body.entry[0].changes[0].value.contacts[0].wa_id
Usually the same as the from field
WhatsApp Message ID:
Path: body.entry[0].changes[0].value.messages[0].id
Example value: "wamid.XXXXXXXXX"
Timestamp:
Path: body.entry[0].changes[0].value.messages[0].timestamp
Example value: "1234567890" (Unix timestamp)
HOW TO IDENTIFY A BUTTON CLICK:
Check these two conditions:
body.entry[0].changes[0].value.messages[0].type equals "interactive"
body.entry[0].changes[0].value.messages[0].interactive.type equals "button_reply"
If both are true, it's a button click and you can extract button_reply.id and button_reply.title
EXAMPLE PARSING LOGIC FOR GROWTHPOINT:
First, extract the message object from the nested structure:
Get body.entry[0].changes[0].value.messages[0] and store it in a variable
Then check the message type:
If message.type equals "interactive" and message.interactive.type equals "button_reply", it's a button click
Extract the data:
Button ID: message.interactive.button_reply.id
Button Title: message.interactive.button_reply.title
User phone: message.from
Message ID: message.id
For text messages, check if message.type equals "text" and get the text from message.text.body
YES IT IS STANDARD META FORMAT:
Woosh Bridge forwards the EXACT same payload that Meta Graph API sends. There is zero transformation. If GrowthPoint has code that works with Meta's webhooks directly, it will work identically with Woosh Bridge.
The structure follows Meta's official WhatsApp Business API webhook format with the full entry array, changes array, value object, and messages array hierarchy.
WHY THEY GET PROCESSED FALSE:
Their endpoint is responding with status ok and processed false. This means:
They received the webhook successfully (200 response)
But their parsing logic didn't find or process the expected data
Common reasons:
They're checking the wrong path for button data
They're not handling the entry array structure properly
They're expecting a flattened format instead of the nested structure
Their code expects a different field name
WHAT TO TELL THEM:
The payload is 100 percent standard Meta Graph API format. Use the exact same parsing code they would use if receiving webhooks directly from Meta. The path is always body.entry[0].changes[0].value.messages[0] to get to the message object, then check message.interactive.button_reply for button clicks.
If they share their current parsing code, we can identify why it's not matching the structure.